// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  username      String   @unique
  email         String   @unique
  passwordHash  String
  profilePicUrl String?
  status        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  groupsCreated    Group[]       @relation("UserCreatedGroups") // groups this user created
  groupMemberships GroupMember[]
  messages         Message[] // messages sent
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  creatorId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator  User          @relation("UserCreatedGroups", fields: [creatorId], references: [id])
  members  GroupMember[]
  messages Message[]
}

model GroupMember {
  id       String   @id @default(cuid())
  userId   String
  groupId  String
  joinedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}

model Message {
  id      String   @id @default(cuid())
  content String
  sentAt  DateTime @default(now())

  senderId String
  groupId  String

  sender User  @relation(fields: [senderId], references: [id])
  group  Group @relation(fields: [groupId], references: [id])
}
